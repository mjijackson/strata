/*
# Static Files

Web applications typically contain a directory of static files that are publicly
accessible. These are usually image and other static asset files that do not
need to be dynamically generated by the application but are instead generated
at deploy time so that they can be served quickly and efficiently.

The `strata.static` middleware serves static files efficiently thanks to node's
excellent I/O handling. You use it like this:

    strata.static(app, "/path/to/public");

The first argument here is the downstream app, as is the case with all Strata
middleware. The second argument is the path to the directory where static files
are kept. When the request comes in, this middleware will check to see if the
request URL matches any of the files in the given directory. If it does, the
middleware streams back the file without passing the request to the downstream
app. If not, the request passes through like normal.

Because of the way this works, you'll normally want to put a `strata.static`
middleware *upstream* from any application logic. This prevents your app from
wasting time processing a request that is only meant to serve a static file
anyway.

The app below demonstrates how to serve any file in the current working
directory (or any of its subdirectories).
*/

var path = require("path"),
    strata = require("strata"),
    Builder = strata.Builder;

// For the sake of this example, the root directory where we store static files
// is the current working directory (i.e. $PWD).
var root = path.resolve(".");

var app = new Builder;

app.use(strata.commonLogger);
app.use(strata.static, root);

module.exports = app;

/*
As in previous chapters, you can save the above code to a file named `app.js`
and run it with:

    $ strata app.js

You can then view the app file (or, similarly, any other file in its same
directory) at [http://localhost:1982/app.js](http://localhost:1982/app.js).
*/
